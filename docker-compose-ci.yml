networks:
    calendize-network:
        driver: bridge

volumes:
    postgres_data:
        driver: local
    redis_data:
        driver: local


services:

    nginx:
        build:
            context: .
            dockerfile: ./docker/nginx.dockerfile
            target: dev
            args:
                - UID=${UID:-1001}
                - GID=${GID:-1001}
                - USER=${USER:-anton}
        restart: unless-stopped
        container_name: nginx
        volumes:
            - ./:/var/www/
        ports:
            - "8000:8000"
        depends_on:
            - php
            - redis
            - queue
            - cron
        extra_hosts:
            - "host.docker.internal:host-gateway"
        networks:
            - calendize-network

    php:
        build:
            context: .
            dockerfile: ./docker/php.dockerfile
            target: php
            args:
                - UID=${UID:-1001}
                - GID=${GID:-1001}
                - USER=${USER:-anton}
        container_name: php
        volumes:
            - ./:/var/www/
        depends_on:
            redis:
                condition: service_healthy
        ports:
            - ":9000"
        extra_hosts:
            - "host.docker.internal:host-gateway"
        networks:
            - calendize-network

    queue:
        build:
            context: .
            dockerfile: ./docker/php.dockerfile
            target: queue
            args:
                - UID=${UID:-1001}
                - GID=${GID:-1001}
                - USER=${USER:-anton}
        container_name: queue
        ports:
            - "8080:8080"
        volumes:
            - ./:/var/www/
        depends_on:
            redis:
                condition: service_healthy
        networks:
            - calendize-network


    cron:
        build:
            context: .
            dockerfile: ./docker/php.dockerfile
            target: cron
            args:
                - UID=${UID:-1001}
                - GID=${GID:-1001}
                - USER=${USER:-anton}
        container_name: cron
        volumes:
            - ./:/var/www/
        networks:
            - calendize-network

    db:
        image: postgres:17.2
        container_name: db
        restart: unless-stopped
        volumes:
            - postgres_data:/var/lib/postgresql/data
        environment:
            POSTGRES_DB: ${DB_DATABASE}
            POSTGRES_USER: ${DB_USERNAME}
            POSTGRES_PASSWORD: ${DB_PASSWORD}
        ports:
            - "5432:5432"
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -U ${DB_USERNAME}" ]
            interval: 5s
            timeout: 30s
            retries: 6
        networks:
            - calendize-network

    redis:
        image: redis:latest
        container_name: redis
        volumes:
            - redis_data:/data
        healthcheck:
            test: [ "CMD", "redis-cli", "ping" ]
            interval: 5s
            timeout: 30s
            retries: 6
        networks:
            - calendize-network


    composer:
        build:
            context: .
            dockerfile: ./docker/php.dockerfile
            target: composer
            args:
                - UID=${UID:-1001}
                - GID=${GID:-1001}
                - USER=${USER:-anton}
        container_name: composer
        volumes:
            - ./:/var/www
        working_dir: /var/www
        depends_on:
            - php
        profiles: [ "composer" ]
        networks:
            - calendize-network


    artisan:
        build:
            context: .
            dockerfile: ./docker/php.dockerfile
            target: base
            args:
                - UID=${UID:-1001}
                - GID=${GID:-1001}
                - USER=${USER:-anton}
        container_name: artisan
        volumes:
            - ./:/var/www
        working_dir: /var/www
        profiles: [ "artisan" ]
        entrypoint: [ 'php', '/var/www/artisan' ]
        networks:
            - calendize-network


    npm:
        build:
            context: .
            dockerfile: ./docker/php.dockerfile
            target: npm
            args:
                - UID=${UID:-1001}
                - GID=${GID:-1001}
                - USER=${USER:-anton}
        container_name: npm
        volumes:
            - ./:/var/www
        ports:
            - "5173:5173"
        profiles: [ "npm" ]
        networks:
            - calendize-network

    cypress:
      image: "cypress/included:13.10.0"
      depends_on:
        - php
        - redis
      environment:
        - CYPRESS_baseUrl=http://nginx:8000
      working_dir: /app
      volumes:
        - ./:/app
      networks:
        - calendize-network
      extra_hosts:
        - "host.docker.internal:host-gateway"

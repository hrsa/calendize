name: 'Build and test'
description: 'Build Calendize images and run tests'
inputs:
  APP_NAME:
    required: true
  APP_ENV:
    required: true
  APP_KEY:
    required: true
  APP_DEBUG:
    required: true
  DB_DATABASE:
    required: true
  DB_USERNAME:
    required: true
  DB_PASSWORD:
    required: true

runs:
  using: "composite"
  steps:
    - run: |
        sed -i "s|APP_NAME=.*|APP_NAME=${{ inputs.APP_NAME }}|" .env.example
        sed -i "s|APP_ENV=.*|APP_ENV=${{ inputs.APP_ENV }}|" .env.example
        sed -i "s|APP_KEY=.*|APP_KEY=${{ inputs.APP_KEY }}|" .env.example
        sed -i "s|APP_DEBUG=.*|APP_DEBUG=${{ inputs.APP_DEBUG }}|" .env.example
        sed -i "s|DB_DATABASE=.*|DB_DATABASE=${{ inputs.DB_DATABASE }}|" .env.example
        sed -i "s|DB_USERNAME=.*|DB_USERNAME=${{ inputs.DB_USERNAME }}|" .env.example
        sed -i "s|DB_PASSWORD=.*|DB_PASSWORD=${{ inputs.DB_PASSWORD }}|" .env.example
        cp .env.example .env
        rm .dockerignore
        cat .env
        docker compose -f docker-compose-ci.yml up -d db
        docker compose -f docker-compose-ci.yml build php
        docker compose -f docker-compose-ci.yml build composer
        docker compose -f docker-compose-ci.yml build artisan
        docker compose -f docker-compose-ci.yml build npm
        docker compose -f docker-compose-ci.yml run --rm composer install --no-scripts --no-progress
        docker compose -f docker-compose-ci.yml run --rm npm install
        docker compose -f docker-compose-ci.yml run --rm npm run build
        docker compose -f docker-compose-ci.yml run --rm artisan migrate --force
        docker compose -f docker-compose-ci.yml run --rm artisan test
      shell: bash

